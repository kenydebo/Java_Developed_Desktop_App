/*
 * Purpose: Main frame used to display Package tool class for TravelExperts Database 
 * Author:  Bade-Adebowale Kehinde
 * Date: August 2015
 */

package gui;

import dbase.CustomerDB;
import static dbase.CustomerDB.getStatus;
import static dbase.MySQLData.connectDB;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableModel;


public class CustomerFrame extends javax.swing.JInternalFrame 
{

    /**
     * Creates new form AgentMainFrame
     */
    public CustomerFrame() {
        initComponents();
        
        fillTableCustomers();
        fillTableAgents();
    }
   
    String CustFirst = "%";
    String CustProv = "%";
    String CustCity = "%";
    String CustCountry = "%";
    String AgentFirst = "%";
    String AgentId = "%";
    
    int add = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        lblAgentList = new javax.swing.JLabel();
        btnAssignAgent = new javax.swing.JButton();
        txtAgencyId = new javax.swing.JTextField();
        txtAgentFirstNAme = new javax.swing.JTextField();
        lblAgentId = new javax.swing.JLabel();
        lblAgentFirstName = new javax.swing.JLabel();
        txtCustCity = new javax.swing.JTextField();
        txtCustFirstName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCustCountry = new javax.swing.JTextField();
        txtCustProv = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAgents = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        View = new javax.swing.JMenu();
        ShowAgents = new javax.swing.JMenuItem();
        HideAgents = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Customer Tool");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("List of Customers");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 160, 20));

        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CustomerId", "First Name", "Last Name", "Address", "City", "Province", "Postal Code", "Country", "Home Phone", "Bus Phone", "Email", "AgentId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomers.getTableHeader().setReorderingAllowed(false);
        tblCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomersMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCustomers);
        if (tblCustomers.getColumnModel().getColumnCount() > 0) {
            tblCustomers.getColumnModel().getColumn(0).setHeaderValue("CustomerId");
            tblCustomers.getColumnModel().getColumn(1).setHeaderValue("First Name");
            tblCustomers.getColumnModel().getColumn(2).setHeaderValue("Last Name");
            tblCustomers.getColumnModel().getColumn(3).setHeaderValue("Address");
            tblCustomers.getColumnModel().getColumn(4).setHeaderValue("City");
            tblCustomers.getColumnModel().getColumn(5).setHeaderValue("Province");
            tblCustomers.getColumnModel().getColumn(6).setHeaderValue("Postal Code");
            tblCustomers.getColumnModel().getColumn(7).setHeaderValue("Country");
            tblCustomers.getColumnModel().getColumn(8).setHeaderValue("Home Phone");
            tblCustomers.getColumnModel().getColumn(9).setHeaderValue("Bus Phone");
            tblCustomers.getColumnModel().getColumn(10).setHeaderValue("Email");
            tblCustomers.getColumnModel().getColumn(11).setHeaderValue("AgentId");
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 1000, 160));

        lblAgentList.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblAgentList.setText("List of Agents");
        getContentPane().add(lblAgentList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 120, -1));

        btnAssignAgent.setText("Re/Assign Agent");
        btnAssignAgent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAssignAgentMouseClicked(evt);
            }
        });
        btnAssignAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignAgentActionPerformed(evt);
            }
        });
        getContentPane().add(btnAssignAgent, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 290, 190, 40));

        txtAgencyId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAgencyIdKeyTyped(evt);
            }
        });
        getContentPane().add(txtAgencyId, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 400, 190, 30));

        txtAgentFirstNAme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgentFirstNAmeActionPerformed(evt);
            }
        });
        txtAgentFirstNAme.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAgentFirstNAmeKeyTyped(evt);
            }
        });
        getContentPane().add(txtAgentFirstNAme, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 360, 190, 30));

        lblAgentId.setText("AgencyID");
        getContentPane().add(lblAgentId, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 400, 60, 30));

        lblAgentFirstName.setText("Agent First Name");
        getContentPane().add(lblAgentFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, 100, 20));

        txtCustCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustCityKeyTyped(evt);
            }
        });
        getContentPane().add(txtCustCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 190, 30));

        txtCustFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustFirstNameKeyTyped(evt);
            }
        });
        getContentPane().add(txtCustFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 190, 30));

        jLabel5.setText("Customer City");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 80, 30));

        jLabel6.setText("Customer First Name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 130, 20));

        txtCustCountry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustCountryKeyTyped(evt);
            }
        });
        getContentPane().add(txtCustCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 70, 190, 30));

        txtCustProv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustProvKeyTyped(evt);
            }
        });
        getContentPane().add(txtCustProv, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 30, 190, 30));

        jLabel7.setText("Customer Country");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, 110, 30));

        jLabel8.setText("Customer Province");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 40, 110, 20));

        tblAgents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Agent Id", "First Name", "Middle Initial", "Last Name", "Bus Phone", "Email", "Position", "Agency Id", "Agent Status", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAgents.getTableHeader().setReorderingAllowed(false);
        tblAgents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAgentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAgents);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 1000, 150));

        View.setText("View");
        View.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        ShowAgents.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ShowAgents.setText("Show Agents");
        ShowAgents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowAgentsMouseClicked(evt);
            }
        });
        ShowAgents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAgentsActionPerformed(evt);
            }
        });
        View.add(ShowAgents);

        HideAgents.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        HideAgents.setText("Hide Agents");
        HideAgents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HideAgentsMouseClicked(evt);
            }
        });
        View.add(HideAgents);

        jMenuBar1.add(View);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    
    
    private void tblCustomersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomersMouseClicked
        // TODO add your handling code here:
 
    }//GEN-LAST:event_tblCustomersMouseClicked
   
    private void btnAssignAgentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAssignAgentMouseClicked
        Object Agentid = ((DefaultTableModel) tblAgents.getModel()).getValueAt(tblAgents.getSelectedRow(), 0);  
        Object CustomerId = ((DefaultTableModel) tblCustomers.getModel()).getValueAt(tblCustomers.getSelectedRow(), 0); 
        if (Agentid !=  null && CustomerId != null)
        {
        CustomerDB.updateCustomerAgent(Agentid.toString(),CustomerId.toString());
        fillTableCustomers();
        
       
        JOptionPane.showMessageDialog(null, "Customer's Agent Successfully Updated " + JOptionPane.INFORMATION_MESSAGE);
        }
        else 
        {
         JOptionPane.showMessageDialog(null, "Please Select a Customer to Update " + JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnAssignAgentMouseClicked

    private void tblAgentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAgentsMouseClicked
    
    }//GEN-LAST:event_tblAgentsMouseClicked

    private void txtAgentFirstNAmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgentFirstNAmeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgentFirstNAmeActionPerformed

    private void ShowAgentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAgentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShowAgentsActionPerformed

    private void btnAssignAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignAgentActionPerformed
        

    }//GEN-LAST:event_btnAssignAgentActionPerformed

    private void txtCustFirstNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustFirstNameKeyTyped
     
        Filter();// TODO add your handling code here:
    }//GEN-LAST:event_txtCustFirstNameKeyTyped

    private void txtCustProvKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustProvKeyTyped
        Filter();        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustProvKeyTyped

    private void txtCustCityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustCityKeyTyped
    Filter();        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustCityKeyTyped

    private void txtCustCountryKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustCountryKeyTyped
        Filter();        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustCountryKeyTyped

    private void ShowAgentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowAgentsMouseClicked
       
      txtAgentFirstNAme.setVisible(true);
      txtAgencyId.setVisible(true);    
      // TODO add your handling code here:
    }//GEN-LAST:event_ShowAgentsMouseClicked

    private void HideAgentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HideAgentsMouseClicked
        // TODO add your handling code here:
         txtAgentFirstNAme.setVisible(false);
         txtAgencyId.setVisible(false);  
         lblAgentId.setVisible(false);
         lblAgentFirstName.setVisible(false);
    }//GEN-LAST:event_HideAgentsMouseClicked

    private void txtAgentFirstNAmeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgentFirstNAmeKeyTyped
    FilterAgents();        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgentFirstNAmeKeyTyped

    private void txtAgencyIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgencyIdKeyTyped
        FilterAgents();        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgencyIdKeyTyped



    
    
    /// <summary>
    /// Fill Agent table w/ agent records
    /// </summary>
    /// <param name=""></param>
    /// <returns></returns>
    public void fillTableAgents()
    {
        // Local variables
        Connection connection = null;
        ResultSet resultSet = null;
        Statement statement = null;
        
        //Vector<Object> columnNames = new Vector<Object>();
        //Vector<Object> data = new Vector<Object>();
        //List<Agent> agents = new ArrayList<Agent>();

        try 
        {
            // Open db connection
            connection = connectDB();
            
            // Statements allow us to issue SQL queries to dbase.
            // Note: One statement object supports exactly one result set at a time. 
            // If you want several result sets at same time, create several Statement objects.
            statement = connection.createStatement();

            String query = "SELECT * FROM Agents Where AgentStatus='Active'";
            // Execute SQL statement and get back a result set (or an exception)
            resultSet = statement.executeQuery(query);
            
            TableModel model = null;
        
            // Remove previously added rows
            while(tblAgents.getRowCount() > 0) 
            {
                ((DefaultTableModel) tblAgents.getModel()).removeRow(0);
            }
            int columns = resultSet.getMetaData().getColumnCount();
            while(resultSet.next())
            {  
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++)
                {  
                   row[i - 1] = resultSet.getObject(i);
                }
              ((DefaultTableModel) tblAgents.getModel()).insertRow(resultSet.getRow()-1,row);
               
            }

            resultSet.close();
        }
        //catch(InstantiationException | IllegalAccessException | SQLException e)
        catch (Exception e) {
            e.printStackTrace();
        }
       // return tblAgents();
    }


        public void fillTableCustomers()
    {
        // Local variables
        Connection connection = null;
        ResultSet resultSet = null;
        Statement statement = null;
        
        
        //Vector<Object> columnNames = new Vector<Object>();
        //Vector<Object> data = new Vector<Object>();
        //List<Agent> agents = new ArrayList<Agent>();

        try 
        {
            // Open db connection
            connection = connectDB();
            
            // Statements allow us to issue SQL queries to dbase.
            // Note: One statement object supports exactly one result set at a time. 
            // If you want several result sets at same time, create several Statement objects.
            statement = connection.createStatement();

            String query = "SELECT * FROM Customers " +
                           "WHERE  CustFirstName like '" +
                           CustFirst + "' AND CustCity like '" +
                           CustCity + "' AND CustProv like '" +
                           CustProv + "' AND CustCountry like '" +
                           CustCountry + "'";
            // Execute SQL statement and get back a result set (or an exception)
            resultSet = statement.executeQuery(query);
            
            TableModel model = null;
        
            // Remove previously added rows
            while(tblCustomers.getRowCount() > 0) 
            {
                ((DefaultTableModel) tblCustomers.getModel()).removeRow(0);
            }
            int columns = resultSet.getMetaData().getColumnCount();
            while(resultSet.next())
            {  
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++)
                {  
                   row[i - 1] = resultSet.getObject(i);
                }
              ((DefaultTableModel) tblCustomers.getModel()).insertRow(resultSet.getRow()-1,row);
               
               String AStat = getStatus(resultSet.getString("CustomerId"));  
              // System.out.println(AStat);
                     
             // if(getStatus(resultSet.getString("CustomerId").toString())=="Active")
              if(AStat.equals("Active"))
              {
                  
               System.out.println("I'm ok");
               
               //getRow();
              
              }
              else
              {
                // System.out.print("Troubled"); 
              }
            }

            resultSet.close();
        }
        //catch(InstantiationException | IllegalAccessException | SQLException e)
        catch (Exception e) {
            e.printStackTrace();
        }
       // return tblAgents();
    }
        

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem HideAgents;
    private javax.swing.JMenuItem ShowAgents;
    private javax.swing.JMenu View;
    private javax.swing.JButton btnAssignAgent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAgentFirstName;
    private javax.swing.JLabel lblAgentId;
    private javax.swing.JLabel lblAgentList;
    private javax.swing.JTable tblAgents;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTextField txtAgencyId;
    private javax.swing.JTextField txtAgentFirstNAme;
    private javax.swing.JTextField txtCustCity;
    private javax.swing.JTextField txtCustCountry;
    private javax.swing.JTextField txtCustFirstName;
    private javax.swing.JTextField txtCustProv;
    // End of variables declaration//GEN-END:variables
    private void Filter()
    {
       CustFirst = txtCustFirstName.getText()+ "%";
       CustProv = txtCustProv.getText()+ "%";
       CustCity = txtCustCity.getText() + "%";
       CustCountry = txtCustCountry.getText() + "%";
       
       fillTableCustomers();
    }
    
    private void FilterAgents()
    {
        AgentFirst = txtAgentFirstNAme.getText() + "%";
        AgentId = txtAgencyId.getText() + "%"; 
        
        fillTableAgents();
    }
    
    
   public void getRow1(JTable tblCustomers)
   {
       for (int i = tblCustomers.getRowCount() - 1; i >= 0; --i)
       {
           for (int j = tblCustomers.getColumnCount() - 1; j >=0; --j)
           {
               if (tblCustomers.getValueAt(i,j).equals("Inactive"))
               {
                   setBackground(Color.red);
               }
           }
       }
      //return this.tblCustomers.get   
   }

    private void getRow() {
        
        for (int i = tblCustomers.getRowCount() - 1; i >= 0; --i)
       {
           for (int j = tblCustomers.getColumnCount() - 1; j >=0; --j)
           {
               if (tblCustomers.getValueAt(i,j).equals("Inactive"))
               {
                   setBackground(Color.red);
               }
           }
       }
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    

}

